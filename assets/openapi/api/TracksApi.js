/**
 * Spolyr
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Lyrics from '../model/Lyrics';
import TrackDetail from '../model/TrackDetail';
import TracksGet200Response from '../model/TracksGet200Response';
import TracksStats from '../model/TracksStats';

/**
* Tracks service.
* @module api/TracksApi
* @version 1.0.0
*/
export default class TracksApi {

    /**
    * Constructs a new TracksApi. 
    * @alias module:api/TracksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns a list of tracks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page number (default to 1)
     * @param {Number} opts.limit Limits the size of the result size (default to 25)
     * @param {String} opts.query Keywords or query to filter results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TracksGet200Response} and HTTP response
     */
    tracksGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TracksGet200Response;
      return this.apiClient.callApi(
        '/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a list of tracks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page number (default to 1)
     * @param {Number} opts.limit Limits the size of the result size (default to 25)
     * @param {String} opts.query Keywords or query to filter results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TracksGet200Response}
     */
    tracksGet(opts) {
      return this.tracksGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a track
     * @param {String} id Numeric ID of the track to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackDetail} and HTTP response
     */
    tracksIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tracksIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackDetail;
      return this.apiClient.callApi(
        '/tracks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns a track
     * @param {String} id Numeric ID of the track to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackDetail}
     */
    tracksIdGet(id) {
      return this.tracksIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates lyrics of a track
     * @param {String} id Numeric ID of the track to update
     * @param {module:model/Lyrics} lyrics Contains new lyrics of track
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackDetail} and HTTP response
     */
    tracksIdPatchWithHttpInfo(id, lyrics) {
      let postBody = lyrics;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tracksIdPatch");
      }
      // verify the required parameter 'lyrics' is set
      if (lyrics === undefined || lyrics === null) {
        throw new Error("Missing the required parameter 'lyrics' when calling tracksIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackDetail;
      return this.apiClient.callApi(
        '/tracks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updates lyrics of a track
     * @param {String} id Numeric ID of the track to update
     * @param {module:model/Lyrics} lyrics Contains new lyrics of track
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackDetail}
     */
    tracksIdPatch(id, lyrics) {
      return this.tracksIdPatchWithHttpInfo(id, lyrics)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns stats about your index
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TracksStats} and HTTP response
     */
    tracksStatsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TracksStats;
      return this.apiClient.callApi(
        '/tracks-stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Returns stats about your index
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TracksStats}
     */
    tracksStatsGet() {
      return this.tracksStatsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
