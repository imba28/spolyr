/**
 * Spolyr
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LyricsImportStatus from '../model/LyricsImportStatus';
import TrackDetail from '../model/TrackDetail';

/**
* Import service.
* @module api/ImportApi
* @version 1.0.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Start import of tracks from spotify library
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    importLibraryPostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import/library', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start import of tracks from spotify library
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    importLibraryPost() {
      return this.importLibraryPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get status of import process
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LyricsImportStatus} and HTTP response
     */
    importLyricsGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LyricsImportStatus;
      return this.apiClient.callApi(
        '/import/lyrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get status of import process
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LyricsImportStatus}
     */
    importLyricsGet() {
      return this.importLyricsGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start import of lyrics
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    importLyricsPostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import/lyrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start import of lyrics
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    importLyricsPost() {
      return this.importLyricsPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Try to import lyrics of a specific track
     * @param {String} id ID of the track to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackDetail} and HTTP response
     */
    importLyricsTrackIdPostWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importLyricsTrackIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackDetail;
      return this.apiClient.callApi(
        '/import/lyrics/track/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Try to import lyrics of a specific track
     * @param {String} id ID of the track to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackDetail}
     */
    importLyricsTrackIdPost(id) {
      return this.importLyricsTrackIdPostWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start import of tracks from playlist
     * @param {String} id Spotify id of playlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    importPlaylistIdPostWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importPlaylistIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/import/playlist/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start import of tracks from playlist
     * @param {String} id Spotify id of playlist
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    importPlaylistIdPost(id) {
      return this.importPlaylistIdPostWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
