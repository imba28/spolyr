/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// PlaylistsApiController binds http requests to an api service and writes the service results to the http response
type PlaylistsApiController struct {
	service      PlaylistsApiServicer
	errorHandler ErrorHandler
}

// PlaylistsApiOption for how the controller is set up.
type PlaylistsApiOption func(*PlaylistsApiController)

// WithPlaylistsApiErrorHandler inject ErrorHandler into controller
func WithPlaylistsApiErrorHandler(h ErrorHandler) PlaylistsApiOption {
	return func(c *PlaylistsApiController) {
		c.errorHandler = h
	}
}

// NewPlaylistsApiController creates a default api controller
func NewPlaylistsApiController(s PlaylistsApiServicer, opts ...PlaylistsApiOption) Router {
	controller := &PlaylistsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PlaylistsApiController
func (c *PlaylistsApiController) Routes() Routes {
	return Routes{
		{
			"PlaylistsGet",
			strings.ToUpper("Get"),
			"/api/playlists",
			c.PlaylistsGet,
		},
	}
}

// PlaylistsGet - Returns a list of your saved playlists
func (c *PlaylistsApiController) PlaylistsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	pageParam, err := parseInt32Parameter(query.Get("page"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PlaylistsGet(r.Context(), pageParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
