/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AuthApiController binds http requests to an api service and writes the service results to the http response
type AuthApiController struct {
	service      AuthApiServicer
	errorHandler ErrorHandler
}

// AuthApiOption for how the controller is set up.
type AuthApiOption func(*AuthApiController)

// WithAuthApiErrorHandler inject ErrorHandler into controller
func WithAuthApiErrorHandler(h ErrorHandler) AuthApiOption {
	return func(c *AuthApiController) {
		c.errorHandler = h
	}
}

// NewAuthApiController creates a default api controller
func NewAuthApiController(s AuthApiServicer, opts ...AuthApiOption) Router {
	controller := &AuthApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthApiController
func (c *AuthApiController) Routes() Routes {
	return Routes{
		{
			"AuthConfigurationGet",
			strings.ToUpper("Get"),
			"/api/auth/configuration",
			c.AuthConfigurationGet,
		},
		{
			"AuthLoginPost",
			strings.ToUpper("Post"),
			"/api/auth/login",
			c.AuthLoginPost,
		},
		{
			"AuthLogoutGet",
			strings.ToUpper("Get"),
			"/api/auth/logout",
			c.AuthLogoutGet,
		},
		{
			"AuthRefreshGet",
			strings.ToUpper("Get"),
			"/api/auth/refresh",
			c.AuthRefreshGet,
		},
	}
}

// AuthConfigurationGet - Get configuration for oAuth2 workflow
func (c *AuthApiController) AuthConfigurationGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthConfigurationGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// AuthLoginPost - Authenticate
func (c *AuthApiController) AuthLoginPost(w http.ResponseWriter, r *http.Request) {
	authLoginPostRequestParam := AuthLoginPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&authLoginPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAuthLoginPostRequestRequired(authLoginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthLoginPost(r.Context(), authLoginPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// AuthLogoutGet - Invalidates the jwt token
func (c *AuthApiController) AuthLogoutGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthLogoutGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// AuthRefreshGet - Refresh JWT access token
func (c *AuthApiController) AuthRefreshGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthRefreshGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
