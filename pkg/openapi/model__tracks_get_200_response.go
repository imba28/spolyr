/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type TracksGet200Response struct {
	Meta PaginationMetadata `json:"meta"`

	Data []TrackInfo `json:"data"`
}

// AssertTracksGet200ResponseRequired checks if the required fields are not zero-ed
func AssertTracksGet200ResponseRequired(obj TracksGet200Response) error {
	elements := map[string]interface{}{
		"meta": obj.Meta,
		"data": obj.Data,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPaginationMetadataRequired(obj.Meta); err != nil {
		return err
	}
	for _, el := range obj.Data {
		if err := AssertTrackInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseTracksGet200ResponseRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TracksGet200Response (e.g. [][]TracksGet200Response), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTracksGet200ResponseRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTracksGet200Response, ok := obj.(TracksGet200Response)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTracksGet200ResponseRequired(aTracksGet200Response)
	})
}
