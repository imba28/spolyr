/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type TrackDetailAllOf struct {
	Lyrics string `json:"lyrics"`

	LyricsImportErrorCount int32 `json:"lyricsImportErrorCount"`

	HasLyrics bool `json:"hasLyrics"`
}

// AssertTrackDetailAllOfRequired checks if the required fields are not zero-ed
func AssertTrackDetailAllOfRequired(obj TrackDetailAllOf) error {
	elements := map[string]interface{}{
		"lyrics":                 obj.Lyrics,
		"lyricsImportErrorCount": obj.LyricsImportErrorCount,
		"hasLyrics":              obj.HasLyrics,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTrackDetailAllOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TrackDetailAllOf (e.g. [][]TrackDetailAllOf), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTrackDetailAllOfRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTrackDetailAllOf, ok := obj.(TrackDetailAllOf)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTrackDetailAllOfRequired(aTrackDetailAllOf)
	})
}
