/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type TrackInfo struct {
	SpotifyId string `json:"spotifyId"`

	Title string `json:"title"`

	Album string `json:"album,omitempty"`

	CoverImage string `json:"coverImage,omitempty"`

	PreviewURL string `json:"previewURL,omitempty"`

	Artists []string `json:"artists,omitempty"`

	HasLyrics bool `json:"hasLyrics"`

	Language string `json:"language,omitempty"`
}

// AssertTrackInfoRequired checks if the required fields are not zero-ed
func AssertTrackInfoRequired(obj TrackInfo) error {
	elements := map[string]interface{}{
		"spotifyId": obj.SpotifyId,
		"title":     obj.Title,
		"hasLyrics": obj.HasLyrics,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTrackInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TrackInfo (e.g. [][]TrackInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTrackInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTrackInfo, ok := obj.(TrackInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTrackInfoRequired(aTrackInfo)
	})
}
