/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type LyricsImportStatus struct {
	Running bool `json:"running"`

	TracksCompleted int32 `json:"tracksCompleted,omitempty"`

	TracksSuccessful int32 `json:"tracksSuccessful,omitempty"`

	TracksError int32 `json:"tracksError,omitempty"`

	TracksTotal int32 `json:"tracksTotal,omitempty"`

	Log string `json:"log,omitempty"`
}

// AssertLyricsImportStatusRequired checks if the required fields are not zero-ed
func AssertLyricsImportStatusRequired(obj LyricsImportStatus) error {
	elements := map[string]interface{}{
		"running": obj.Running,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseLyricsImportStatusRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of LyricsImportStatus (e.g. [][]LyricsImportStatus), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseLyricsImportStatusRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aLyricsImportStatus, ok := obj.(LyricsImportStatus)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertLyricsImportStatusRequired(aLyricsImportStatus)
	})
}
