/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ImportApiController binds http requests to an api service and writes the service results to the http response
type ImportApiController struct {
	service      ImportApiServicer
	errorHandler ErrorHandler
}

// ImportApiOption for how the controller is set up.
type ImportApiOption func(*ImportApiController)

// WithImportApiErrorHandler inject ErrorHandler into controller
func WithImportApiErrorHandler(h ErrorHandler) ImportApiOption {
	return func(c *ImportApiController) {
		c.errorHandler = h
	}
}

// NewImportApiController creates a default api controller
func NewImportApiController(s ImportApiServicer, opts ...ImportApiOption) Router {
	controller := &ImportApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImportApiController
func (c *ImportApiController) Routes() Routes {
	return Routes{
		{
			"ImportLibraryPost",
			strings.ToUpper("Post"),
			"/api/import/library",
			c.ImportLibraryPost,
		},
		{
			"ImportLyricsGet",
			strings.ToUpper("Get"),
			"/api/import/lyrics",
			c.ImportLyricsGet,
		},
		{
			"ImportLyricsPost",
			strings.ToUpper("Post"),
			"/api/import/lyrics",
			c.ImportLyricsPost,
		},
		{
			"ImportLyricsTrackIdPost",
			strings.ToUpper("Post"),
			"/api/import/lyrics/track/{id}",
			c.ImportLyricsTrackIdPost,
		},
		{
			"ImportPlaylistIdPost",
			strings.ToUpper("Post"),
			"/api/import/playlist/{id}",
			c.ImportPlaylistIdPost,
		},
	}
}

// ImportLibraryPost - Start import of tracks from spotify library
func (c *ImportApiController) ImportLibraryPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImportLibraryPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ImportLyricsGet - Get status of import process
func (c *ImportApiController) ImportLyricsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImportLyricsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ImportLyricsPost - Start import of lyrics
func (c *ImportApiController) ImportLyricsPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImportLyricsPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ImportLyricsTrackIdPost - Try to import lyrics of a specific track
func (c *ImportApiController) ImportLyricsTrackIdPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.ImportLyricsTrackIdPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ImportPlaylistIdPost - Start import of tracks from playlist
func (c *ImportApiController) ImportPlaylistIdPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]

	result, err := c.service.ImportPlaylistIdPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
