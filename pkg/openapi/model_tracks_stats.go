/*
 * Spolyr
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type TracksStats struct {
	NumberOfTracks int32 `json:"numberOfTracks"`

	NumberOfTracksWithLyrics int32 `json:"numberOfTracksWithLyrics"`
}

// AssertTracksStatsRequired checks if the required fields are not zero-ed
func AssertTracksStatsRequired(obj TracksStats) error {
	elements := map[string]interface{}{
		"numberOfTracks":           obj.NumberOfTracks,
		"numberOfTracksWithLyrics": obj.NumberOfTracksWithLyrics,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTracksStatsRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TracksStats (e.g. [][]TracksStats), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTracksStatsRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTracksStats, ok := obj.(TracksStats)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTracksStatsRequired(aTracksStats)
	})
}
